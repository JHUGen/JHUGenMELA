with open("/mnt/sda1/RandomRantings/JHU/Andrei_Research/DocumentingMELA/raw_couplings.txt") as f:
    text = f.read()
    for enumcontents in text.split("enum")[1:]:
        enumcontents = enumcontents.strip()
        # assert enumcontents.startswith("{")
        enum_name = enumcontents.split("{")[0]
        print(f'py::enum_<pymela::{enum_name}>(m, "{enum_name}")')
        enumcontents = enumcontents.split("{")[1].split("}")[0]
        for enumitem in enumcontents.split(","):
            enumitem = enumitem.split("=")[0].strip()
            if "SIZE" in enumitem:
                print(f'\t.value("{enumitem}", pymela::{enumitem});\n')
            else:
                print(f'\t.value("{enumitem}", pymela::{enumitem})')
                
with open("/mnt/sda1/RandomRantings/JHU/Andrei_Research/DocumentingMELA/raw_names.txt") as f:
    for line in f:
        var = line.strip().split()[1]
        var = var[:var.find("[")]
        str = f"""
.def("{var}", [](py::object &obj){{
    Mela &D = obj.cast<Mela&>();
    return py::array_t<double>(std::vector<int>{{nSupportedHiggses, SIZE_HGG, 2}}, (const double*) &D.{var}, obj);
}})
"""
        print(str)

with open("/mnt/sda1/RandomRantings/JHU/Andrei_Research/DocumentingMELA/raw_mela_pointers.txt") as f:
    for line in f:
        line = line.strip()
        if "SelfDCoupling" not in line and "SelfDParameter" not in line:
            continue
        elif "SelfDCoupling" in line:
            list_len = 2
        else:
            list_len = 1
        
        
        mela_name, array_name_and_index = line.split("=")
        array_name_and_index = array_name_and_index.replace("SelfDCoupling(", '').replace("SelfDParameter(", '').replace('"', '').replace(")", '').replace("ROOT.pymela.", '')
        array_name_and_index = array_name_and_index.strip().split(',')
        # print(array_name_and_index)
        dimension = len(array_name_and_index)
        
        array_name, index = array_name_and_index[0], array_name_and_index[1:]
        
        if list_len == 2:
            indexstr = ""
            index = [f"[{i.strip()}]" for i in index]
            for i in index:
                indexstr += i
            str = f"""
        .def_property(
            "{mela_name.strip()}", 
            py::cpp_function(
                [](py::object &obj){{
                    Mela &D = obj.cast<Mela&>();
                    return py::array_t<double>(std::vector<int>{{{list_len}}}, (const double*) &D.{array_name}{indexstr}, obj);
                }}, py::keep_alive<0, 1>()),
            py::cpp_function(
                [](Mela &D, std::array<double, 2> coupl){{
                    D.{array_name}{indexstr}[0] = coupl[0];
                    D.{array_name}{indexstr}[1] = coupl[1];
                }}, py::keep_alive<0, 1>())
        )"""
        else:
            indexstr = ""
            index = [i.strip() for i in index]
            indexstr = "{" + ",".join(index) + "}"
            str = f"""
        SELFDPARAMETER.def_property(
            "{mela_name.strip()}", 
            py::cpp_function(
                [](py::object &obj){{
                    Mela& D = obj.cast<&Mela>();
                    py::array_t array_val = py::array_t<double>(std::vector<int>{indexstr}, (const double*) &D.{array_name}, obj);
                    return D.array_val.at({indexstr.replace("{", '').replace("}", '')});
                }}),
            py::cpp_function(
                [](py::object &obj, double coupl){{
                    Mela &D = obj.cast<Mela&>();
                    py::array_t array_val = py::array_t<double>(std::vector<int>{indexstr}, (const double*) &D.{array_name}, obj);
                    array_val.mutable_at({indexstr.replace("{", '').replace("}", '')}) = coupl;
                }}, py::keep_alive<0, 1>())
        )"""
        print(str)